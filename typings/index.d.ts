// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../i2c-bus

declare module 'multiplexer.js' {
    import bus, { I2CBus, BufferCallback } from 'i2c-bus';
    class MultiplexerChannel implements I2CBus {
        tca: Multiplexer;
        channelSwitch: Buffer;
        constructor(tca: Multiplexer, channel: number);
        close(callback: bus.CompletionCallback): void;
        closeSync(): void;
        i2cFuncs(callback: bus.ResultCallback<bus.I2CFuncs>): void;
        i2cFuncsSync(): bus.I2CFuncs;
        scan(callback: bus.ResultCallback<number[]>): void;
        scan(address: number, callback: bus.ResultCallback<number[]>): void;
        scan(startAddr: number, endAddr: number, callback: bus.ResultCallback<number[]>): void;
        scanSync(address?: number): number[];
        deviceId(address: number, callback: bus.ResultCallback<bus.I2CDeviceId>): void;
        deviceIdSync(address: number): bus.I2CDeviceId;
        i2cRead(address: number, length: number, buffer: Buffer, callback: BufferCallback): void;
        i2cReadSync(address: number, length: number, buffer: Buffer): number;
        i2cWrite(address: number, length: number, buffer: Buffer, callback: BufferCallback): void;
        i2cWriteSync(address: number, length: number, buffer: Buffer): number;
        readByte(address: number, command: number, callback: bus.ResultCallback<number>): void;
        readByteSync(address: number, command: number): number;
        readWord(address: number, command: number, callback: bus.ResultCallback<number>): void;
        readWordSync(address: number, command: number): number;
        readI2cBlock(address: number, command: number, length: number, buffer: Buffer, callback: bus.BufferCallback): void;
        readI2cBlockSync(address: number, command: number, length: number, buffer: Buffer): number;
        receiveByte(address: number, callback: bus.ResultCallback<number>): void;
        receiveByteSync(address: number): number;
        sendByte(address: number, byte: number, callback: bus.CompletionCallback): void;
        sendByteSync(address: number, byte: number): void;
        writeByte(address: number, command: number, byte: number, callback: bus.CompletionCallback): void;
        writeByteSync(address: number, command: number, byte: number): void;
        writeWord(address: number, command: number, word: number, callback: bus.CompletionCallback): void;
        writeWordSync(address: number, command: number, word: number): void;
        writeQuick(address: number, command: number, bit: number, callback: bus.CompletionCallback): void;
        writeQuickSync(address: number, command: number, bit: number): void;
        writeI2cBlock(address: number, command: number, length: number, buffer: Buffer, callback: bus.BufferCallback): void;
        writeI2cBlockSync(address: number, command: number, length: number, buffer: Buffer): number;
        promisifiedBus(): bus.PromisifiedBus;
        switch(): void;
    }
    class Multiplexer {
        address: number;
        i2c: I2CBus;
        channels: Array<MultiplexerChannel>;
        constructor(address: number, i2c: number);
    }
    export = Multiplexer;
}

